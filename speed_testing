#timeit testing for recursive code for algorithm

from timeit import default_timer as timer
import sys
import itertools

start = timer()

NO_PATH = sys.maxsize
graph = [[0, 7, NO_PATH, 8],
         [NO_PATH, 0, 5, NO_PATH],
         [NO_PATH, NO_PATH, 0, 2],
         [NO_PATH, NO_PATH, NO_PATH, 0]]
MAX_LENGTH = len(graph[0])

# Function to calculate the shortest pathway
def shortest_pathway(start_node, intermediate, end_node, distance):
    # Function will return the minimum pathway through start node, intermediate nodes, and end node.
    # This will return shortest point of starting node, intermediate node and end node
    # Base case that removes 0
    if 0 >= intermediate:
        # Testing all intermediate nodes
         return min(shortest_pathway(start_node, intermediate - 1, distance), shortest_pathway(intermediate, end_node,
                                                                                               distance))
    else:
        return (distance[start_node][end_node])


# New Function for defining distance between nodes and connections

def floyd(distance):
    # Base Case
    for start, end in itertools.product(range(MAX_LENGTH), range(MAX_LENGTH)):
        # new call for distance in fct
        # Base case. This will call out NO_PATH
        # distance is pathway
        if distance[start][end] == 0:
            continue
        # Reach source through shortest destination within highest max length
        shortest_pathway(start, end, MAX_LENGTH - 1, distance)

        #return function
        return distance

print(floyd(graph))

end = timer()
print(end - start)

#end 



#timeit testing fct shortest_pathway

from timeit import default_timer as timer
import sys
import itertools

start = timer()

# Function to calculate the shortest pathway
def shortest_pathway(start_node, intermediate, end_node, distance):
    # Function will return the minimum pathway through start node, intermediate nodes, and end node.
    # This will return shortest point of starting node, intermediate node and end node
    # Base case that removes 0
    if 0 >= intermediate:
        # Testing all intermediate nodes
         return min(shortest_pathway(start_node, intermediate - 1, distance), shortest_pathway(intermediate, end_node,
                                                                                               distance))
    else:
        return (distance[start_node][end_node])

end = timer()
print(end - start)

#end


#timeit testing fct floyd(distance)


from timeit import default_timer as timer
import sys
import itertools

start = timer()

def floyd(distance):
    # Base Case
    for start, end in itertools.product(range(MAX_LENGTH), range(MAX_LENGTH)):
        # new call for distance in fct
        # Base case. This will call out NO_PATH
        # distance is pathway
        if distance[start][end] == 0:
            continue
        # Reach source through shortest destination within highest max length
        shortest_pathway(start, end, MAX_LENGTH - 1, distance)

        #return function
        return distance

end = timer()
print(end - start)

#end


#timeit testing for iterative fct 

from timeit import default_timer as timer
import sys
import itertools

start = timer()

NO_PATH = sys.maxsize
graph = [[0, 7, NO_PATH, 8],
         [NO_PATH, 0, 5, NO_PATH],
         [NO_PATH, NO_PATH, 0, 2],
         [NO_PATH, NO_PATH, NO_PATH, 0]]
MAX_LENGTH = len(graph[0])

def floyd(distance):
    for intermediate, start_node, end_node \
            in itertools.product \
                (range(MAX_LENGTH), range(MAX_LENGTH), range(MAX_LENGTH)):
        if start_node == end_node:
            distance[start_node][end_node] = 0
        continue

    distance[start_node][end_node] = min(distance[start_node][end_node],
                                         distance[start_node][intermediate] + distance[intermediate][end_node])
    print(distance)

floyd(graph)

end = timer()
print(end - start)

